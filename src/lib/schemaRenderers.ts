import { ITjsSchema } from '../';

export const disclaimer = [
  '/** WARNING: Generated by @temando/schema-tools */',
  '/* tslint:disable */',
].join('\n');

export function renderSchemasToTs (schemas: ITjsSchema[], { asDefaultExport = false } = {}) {
  if (asDefaultExport) { schemas = [schemas[0]]; }

  return [
    disclaimer,
    ...schemas.map(({ key, type, schema }) =>
      [
        ``,
        `/** @type ${type} */`,
        `export ${asDefaultExport ? 'default' : `const ${key} =`} ${JSON.stringify(schema, null, 2)};`,
      ].join('\n'),
    ),
    '',
  ].join('\n');
}

export type IGetImportPath = (name: string) => string;

export function renderExportsToTs (names: string[], {
  getImportPath,
  getImportPattern = (name) => `* as ${name}`,
}: {
  /** Used to produce the path in `import * as foo from 'getImportPath()'` */
  getImportPath: IGetImportPath,

  /** (Optional) Defaults to returning `* as ${name}` */
  getImportPattern?: IGetImportPath,
}) {
  const imports = names.map((name) => `import ${getImportPattern(name)} from '${getImportPath(name)}';`);

  return [
    disclaimer,
    ...imports,
    '',
    `export {`,
    ...names.map((str) => `  ${str},`),
    `}`,
    '',
  ].join('\n');
}

export function renderSchemasToJson (schemas: ITjsSchema[]) {
  return JSON.stringify(schemas[0]);
}
