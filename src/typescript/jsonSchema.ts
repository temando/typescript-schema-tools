#!/usr/bin/env ts-node

// TODO: NPM MODULIFY THIS

import { dereference } from '@jdw/jst';
import { mkdirs, writeFile } from 'fs-extra';
import { dirname } from 'path';
import * as TJS from 'typescript-json-schema';

export interface ISchemaResult {
  key: string;
  type: string;
  schema: any;
}

export interface IResults { [key: string]: ISchemaResult[]; }

// optionally pass argument to schema generator
export const settings: TJS.PartialArgs = {
  required: true,
};

export const disclaimer = [
  '/** WARNING: Generated by a script, DO NOT EDIT MANUALLY */',
  '/* tslint:disable */',
].join('\n');

export const renderSchemasToTs = (schemas, { exportAsDefault = false } = {}) => {
  return [
    disclaimer,
    ...schemas.map(({ key, type, schema }) =>
      [
        ``,
        `/** @type ${type} */`,
        `export ${exportAsDefault ? 'default' : `const ${key} =`} ${JSON.stringify(schema, null, 2)};`,
      ].join('\n'),
    ),
    '',
  ].join('\n');
};

export const renderFunctionExportsToTs = (funcNames: string[]) => {
  const imports = funcNames.map((name) => `import * as ${name} from '../functions/${name}/schemas';`);

  return [
    disclaimer,
    ...imports,
    '',
    `export {`,
    ...funcNames.map((str) => `  ${str},`),
    `}`,
    '',
  ].join('\n');
};

/**
 * Builds a schema definition then writes it
 */
export async function build ({ name, file, types, to, exportAsDefault = false, options }: {
  name: string,
  file: string,
  types: { [key: string]: string },
  to: string;
  exportAsDefault: boolean;
  options: Partial<TJS.Args>
}) {
  const program = TJS.getProgramFromFiles([file]);

  const schemas: ISchemaResult[] = [];

  Object.keys(types).forEach((key) => {
    const type = types[key];

    let schema;
    try {
      schema = TJS.generateSchema(program, type, {
        ...settings,
        noExtraProps: true,
        ignoreErrors: true, // Remove when we upgrade
        ...options,
      });

      schema.id = schema.id || name;
    } catch (err) { return; }

    if (schema) { schemas.push({ key, type, schema: dereference(schema) }); }
  });

  if (schemas.length) {
    await mkdirs(dirname(to));

    const tsFile = renderSchemasToTs(schemas, { exportAsDefault });

    await writeFile(to, tsFile);
  }

  return schemas;
}
